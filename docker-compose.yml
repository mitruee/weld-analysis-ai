services:

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: weld_jaeger
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # collector HTTP
      - "6831:6831/udp"  # agent compact
      - "6832:6832/udp"  # agent binary
    networks:
      - app-network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.74.0
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
#    ports:
#      - "4317:4317"
    expose:
      - "4317"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:13133/healthz || exit 1"]
      interval: 10s
      timeout: 2s
      retries: 5
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: A12138877
      POSTGRES_DB: deffection_detect
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  ml-service:
    build:
      context: ./APPLICATION
      dockerfile: predict_service/Dockerfile
    env_file:
      - ./APPLICATION/predict_service/.env
    depends_on:
      - postgres
      - otel-collector
    ports:
      - "8001:8001"
    networks:
      - app-network

  frontend-service:
    build:
      context: ./APPLICATION
      dockerfile: app/Dockerfile
    env_file:
      - ./APPLICATION/app/.env
    depends_on:
      - postgres
      - ml-service
      - otel-collector
    ports:
      - "8000:8000"
    networks:
      - app-network

# Объявляем том pgdata
volumes:
  pgdata:

# Общая сеть
networks:
  app-network: